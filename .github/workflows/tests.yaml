name: Tests
on:
  push:
  pull_request:
#on:
#  push:
#    branches:
#      - main
#  pull_request:
#    branches:
#      - main

env:
  IMAGE_NAME: mysql-bkup

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      mysql8:
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: testdb
          MYSQL_USER: user
          MYSQL_PASSWORD: password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -uuser -ppassword"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Build the Docker image
      - name: Build Docker Image
        run: |
          docker buildx build -t ${{ env.IMAGE_NAME }}:latest --load .

      - name: Verify Docker images
        run: |
          docker images

      - name: Wait for MySQL to be ready
        run: |
          docker run --rm --network host mysql:8 mysqladmin ping -h 127.0.0.1 -uuser -ppassword --wait
#      - name: Create testdb2
#        run: |
#          docker exec mysql8 mysql -u root -proot -e "CREATE DATABASE testdb2;"
#          echo "Database testdb2 created"
      - name: Test restore
        run: |
          docker run --rm --name ${{ env.IMAGE_NAME }} \
            -v ./migrations:/backup/ \
            --network host \
            -e DB_HOST=127.0.0.1 \
            -e DB_USERNAME=root \
            -e DB_PASSWORD=password \
            -e DB_NAME=testdb \
            ${{ env.IMAGE_NAME }}:latest restore -f init.sql
          
          echo "Database restore completed"

      - name: Test backup
        run: |
          docker run --rm --name ${{ env.IMAGE_NAME }} \
            -v ./migrations:/backup/ \
            --network host \
            -e DB_HOST=127.0.0.1 \
            -e DB_USERNAME=user \
            -e DB_PASSWORD=password \
            -e DB_NAME=testdb \
            ${{ env.IMAGE_NAME }}:latest backup
          
          echo "Database backup completed"
      - name: Test encrypted backup
        run: |
          docker run --rm --name ${{ env.IMAGE_NAME }} \
            -v ./migrations:/backup/ \
            --network host \
            -e DB_HOST=127.0.0.1 \
            -e DB_USERNAME=user \
            -e DB_PASSWORD=password \
            -e GPG_PASSPHRASE=password \
            -e DB_NAME=testdb \
            ${{ env.IMAGE_NAME }}:latest backup --disable-compression
          
          echo "Database encrypted backup completed"
      - name: Test backup all
        run: |
          docker run --rm --name ${{ env.IMAGE_NAME }} \
            -v ./migrations:/backup/ \
            --network host \
            -e DB_HOST=127.0.0.1 \
            -e DB_USERNAME=user \
            -e DB_PASSWORD=password \
            -e DB_NAME=testdb \
            ${{ env.IMAGE_NAME }}:latest backup --all-databases
          
          echo "Database backup completed"
      - name: Test multiple backup
        run: |
          docker run --rm --name ${{ env.IMAGE_NAME }} \
            -v ./migrations:/backup/ \
            --network host \
            -e DB_HOST=127.0.0.1 \
            -e DB_USERNAME_TESTDB2=user \
            -e DB_PASSWORD_TESTDB2=password \
            -e DB_HOST_TESTDB2=127.0.0.1 \
            ${{ env.IMAGE_NAME }}:latest backup -c test_config.yaml
          
          echo "Database backup completed"
      - name: Test scheduled backup
        run: |
          docker run -d --rm --name ${{ env.IMAGE_NAME }} \
            -v ./migrations:/backup/ \
            --network host \
            -e DB_HOST=127.0.0.1 \
            -e DB_USERNAME=user \
            -e DB_PASSWORD=password \
            -e DB_NAME=testdb \
            ${{ env.IMAGE_NAME }}:latest backup -e "@every 10"
          
          echo "Waiting for backup to be done..."
          sleep 30
          docker logs ${{ env.IMAGE_NAME }}
          echo "Database backup completed"
      # Cleanup: Stop and remove containers
      - name: Clean up
        run: |
          docker stop ${{ env.IMAGE_NAME }} || true
          docker rm ${{ env.IMAGE_NAME }} || true